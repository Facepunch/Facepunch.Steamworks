using Facepunch.Steamworks;
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace SteamNative
{
	internal static partial class Platform
	{
		internal interface Interface : IDisposable
		{
			// Implementation should return true if _ptr is non null
			bool IsValid { get; } 
			
			uint /*uint32*/ ISteamAppList_GetNumInstalledApps();
			uint /*uint32*/ ISteamAppList_GetInstalledApps( IntPtr /*AppId_t **/ pvecAppID, uint /*uint32*/ unMaxAppIDs );
			int /*int*/ ISteamAppList_GetAppName( uint nAppID, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameMax );
			int /*int*/ ISteamAppList_GetAppInstallDir( uint nAppID, System.Text.StringBuilder /*char **/ pchDirectory, int /*int*/ cchNameMax );
			int /*int*/ ISteamAppList_GetAppBuildId( uint nAppID );
			bool /*bool*/ ISteamApps_BIsSubscribed();
			bool /*bool*/ ISteamApps_BIsLowViolence();
			bool /*bool*/ ISteamApps_BIsCybercafe();
			bool /*bool*/ ISteamApps_BIsVACBanned();
			IntPtr ISteamApps_GetCurrentGameLanguage();
			IntPtr ISteamApps_GetAvailableGameLanguages();
			bool /*bool*/ ISteamApps_BIsSubscribedApp( uint appID );
			bool /*bool*/ ISteamApps_BIsDlcInstalled( uint appID );
			uint /*uint32*/ ISteamApps_GetEarliestPurchaseUnixTime( uint nAppID );
			bool /*bool*/ ISteamApps_BIsSubscribedFromFreeWeekend();
			int /*int*/ ISteamApps_GetDLCCount();
			bool /*bool*/ ISteamApps_BGetDLCDataByIndex( int /*int*/ iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAvailable, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameBufferSize );
			void /*void*/ ISteamApps_InstallDLC( uint nAppID );
			void /*void*/ ISteamApps_UninstallDLC( uint nAppID );
			void /*void*/ ISteamApps_RequestAppProofOfPurchaseKey( uint nAppID );
			bool /*bool*/ ISteamApps_GetCurrentBetaName( System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameBufferSize );
			bool /*bool*/ ISteamApps_MarkContentCorrupt( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bMissingFilesOnly );
			uint /*uint32*/ ISteamApps_GetInstalledDepots( uint appID, IntPtr /*DepotId_t **/ pvecDepots, uint /*uint32*/ cMaxDepots );
			uint /*uint32*/ ISteamApps_GetAppInstallDir( uint appID, System.Text.StringBuilder /*char **/ pchFolder, uint /*uint32*/ cchFolderBufferSize );
			bool /*bool*/ ISteamApps_BIsAppInstalled( uint appID );
			CSteamID /*(class CSteamID)*/ ISteamApps_GetAppOwner();
			IntPtr ISteamApps_GetLaunchQueryParam( byte[] /*const char **/ pchKey );
			bool /*bool*/ ISteamApps_GetDlcDownloadProgress( uint nAppID, out ulong /*uint64 **/ punBytesDownloaded, out ulong /*uint64 **/ punBytesTotal );
			int /*int*/ ISteamApps_GetAppBuildId();
			void /*void*/ ISteamApps_RequestAllProofOfPurchaseKeys();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamApps_GetFileDetails( byte[] /*const char **/ pszFileName );
			HSteamPipe /*(HSteamPipe)*/ ISteamClient_CreateSteamPipe();
			bool /*bool*/ ISteamClient_BReleaseSteamPipe( int hSteamPipe );
			HSteamUser /*(HSteamUser)*/ ISteamClient_ConnectToGlobalUser( int hSteamPipe );
			HSteamUser /*(HSteamUser)*/ ISteamClient_CreateLocalUser( out int phSteamPipe, AccountType /*EAccountType*/ eAccountType );
			void /*void*/ ISteamClient_ReleaseUser( int hSteamPipe, int hUser );
			IntPtr /*class ISteamUser **/ ISteamClient_GetISteamUser( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamGameServer **/ ISteamClient_GetISteamGameServer( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			void /*void*/ ISteamClient_SetLocalIPBinding( uint /*uint32*/ unIP, ushort /*uint16*/ usPort );
			IntPtr /*class ISteamFriends **/ ISteamClient_GetISteamFriends( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamUtils **/ ISteamClient_GetISteamUtils( int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamMatchmaking **/ ISteamClient_GetISteamMatchmaking( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamMatchmakingServers **/ ISteamClient_GetISteamMatchmakingServers( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*void **/ ISteamClient_GetISteamGenericInterface( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamUserStats **/ ISteamClient_GetISteamUserStats( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamGameServerStats **/ ISteamClient_GetISteamGameServerStats( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamApps **/ ISteamClient_GetISteamApps( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamNetworking **/ ISteamClient_GetISteamNetworking( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamRemoteStorage **/ ISteamClient_GetISteamRemoteStorage( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamScreenshots **/ ISteamClient_GetISteamScreenshots( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			uint /*uint32*/ ISteamClient_GetIPCCallCount();
			void /*void*/ ISteamClient_SetWarningMessageHook( IntPtr /*SteamAPIWarningMessageHook_t*/ pFunction );
			bool /*bool*/ ISteamClient_BShutdownIfAllPipesClosed();
			IntPtr /*class ISteamHTTP **/ ISteamClient_GetISteamHTTP( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamController **/ ISteamClient_GetISteamController( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamUGC **/ ISteamClient_GetISteamUGC( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamAppList **/ ISteamClient_GetISteamAppList( int hSteamUser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamMusic **/ ISteamClient_GetISteamMusic( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamMusicRemote **/ ISteamClient_GetISteamMusicRemote( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamHTMLSurface **/ ISteamClient_GetISteamHTMLSurface( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamInventory **/ ISteamClient_GetISteamInventory( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamVideo **/ ISteamClient_GetISteamVideo( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			IntPtr /*class ISteamParentalSettings **/ ISteamClient_GetISteamParentalSettings( int hSteamuser, int hSteamPipe, byte[] /*const char **/ pchVersion );
			bool /*bool*/ ISteamController_Init();
			bool /*bool*/ ISteamController_Shutdown();
			void /*void*/ ISteamController_RunFrame();
			int /*int*/ ISteamController_GetConnectedControllers( IntPtr /*ControllerHandle_t **/ handlesOut );
			bool /*bool*/ ISteamController_ShowBindingPanel( ulong controllerHandle );
			ControllerActionSetHandle_t /*(ControllerActionSetHandle_t)*/ ISteamController_GetActionSetHandle( byte[] /*const char **/ pszActionSetName );
			void /*void*/ ISteamController_ActivateActionSet( ulong controllerHandle, ulong actionSetHandle );
			ControllerActionSetHandle_t /*(ControllerActionSetHandle_t)*/ ISteamController_GetCurrentActionSet( ulong controllerHandle );
			void /*void*/ ISteamController_ActivateActionSetLayer( ulong controllerHandle, ulong actionSetLayerHandle );
			void /*void*/ ISteamController_DeactivateActionSetLayer( ulong controllerHandle, ulong actionSetLayerHandle );
			void /*void*/ ISteamController_DeactivateAllActionSetLayers( ulong controllerHandle );
			int /*int*/ ISteamController_GetActiveActionSetLayers( ulong controllerHandle, IntPtr /*ControllerActionSetHandle_t **/ handlesOut );
			ControllerDigitalActionHandle_t /*(ControllerDigitalActionHandle_t)*/ ISteamController_GetDigitalActionHandle( byte[] /*const char **/ pszActionName );
			ControllerDigitalActionData_t /*struct ControllerDigitalActionData_t*/ ISteamController_GetDigitalActionData( ulong controllerHandle, ulong digitalActionHandle );
			int /*int*/ ISteamController_GetDigitalActionOrigins( ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin /*EControllerActionOrigin **/ originsOut );
			ControllerAnalogActionHandle_t /*(ControllerAnalogActionHandle_t)*/ ISteamController_GetAnalogActionHandle( byte[] /*const char **/ pszActionName );
			ControllerAnalogActionData_t /*struct ControllerAnalogActionData_t*/ ISteamController_GetAnalogActionData( ulong controllerHandle, ulong analogActionHandle );
			int /*int*/ ISteamController_GetAnalogActionOrigins( ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin /*EControllerActionOrigin **/ originsOut );
			void /*void*/ ISteamController_StopAnalogActionMomentum( ulong controllerHandle, ulong eAction );
			void /*void*/ ISteamController_TriggerHapticPulse( ulong controllerHandle, SteamControllerPad /*ESteamControllerPad*/ eTargetPad, ushort /*unsigned short*/ usDurationMicroSec );
			void /*void*/ ISteamController_TriggerRepeatedHapticPulse( ulong controllerHandle, SteamControllerPad /*ESteamControllerPad*/ eTargetPad, ushort /*unsigned short*/ usDurationMicroSec, ushort /*unsigned short*/ usOffMicroSec, ushort /*unsigned short*/ unRepeat, uint /*unsigned int*/ nFlags );
			void /*void*/ ISteamController_TriggerVibration( ulong controllerHandle, ushort /*unsigned short*/ usLeftSpeed, ushort /*unsigned short*/ usRightSpeed );
			void /*void*/ ISteamController_SetLEDColor( ulong controllerHandle, byte /*uint8*/ nColorR, byte /*uint8*/ nColorG, byte /*uint8*/ nColorB, uint /*unsigned int*/ nFlags );
			int /*int*/ ISteamController_GetGamepadIndexForController( ulong ulControllerHandle );
			ControllerHandle_t /*(ControllerHandle_t)*/ ISteamController_GetControllerForGamepadIndex( int /*int*/ nIndex );
			ControllerMotionData_t /*struct ControllerMotionData_t*/ ISteamController_GetMotionData( ulong controllerHandle );
			bool /*bool*/ ISteamController_ShowDigitalActionOrigins( ulong controllerHandle, ulong digitalActionHandle, float /*float*/ flScale, float /*float*/ flXPosition, float /*float*/ flYPosition );
			bool /*bool*/ ISteamController_ShowAnalogActionOrigins( ulong controllerHandle, ulong analogActionHandle, float /*float*/ flScale, float /*float*/ flXPosition, float /*float*/ flYPosition );
			IntPtr ISteamController_GetStringForActionOrigin( ControllerActionOrigin /*EControllerActionOrigin*/ eOrigin );
			IntPtr ISteamController_GetGlyphForActionOrigin( ControllerActionOrigin /*EControllerActionOrigin*/ eOrigin );
			SteamInputType /*ESteamInputType*/ ISteamController_GetInputTypeForHandle( ulong controllerHandle );
			IntPtr ISteamFriends_GetPersonaName();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_SetPersonaName( byte[] /*const char **/ pchPersonaName );
			PersonaState /*EPersonaState*/ ISteamFriends_GetPersonaState();
			int /*int*/ ISteamFriends_GetFriendCount( int /*int*/ iFriendFlags );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetFriendByIndex( int /*int*/ iFriend, int /*int*/ iFriendFlags );
			FriendRelationship /*EFriendRelationship*/ ISteamFriends_GetFriendRelationship( ulong steamIDFriend );
			PersonaState /*EPersonaState*/ ISteamFriends_GetFriendPersonaState( ulong steamIDFriend );
			IntPtr ISteamFriends_GetFriendPersonaName( ulong steamIDFriend );
			bool /*bool*/ ISteamFriends_GetFriendGamePlayed( ulong steamIDFriend, ref FriendGameInfo_t /*struct FriendGameInfo_t **/ pFriendGameInfo );
			IntPtr ISteamFriends_GetFriendPersonaNameHistory( ulong steamIDFriend, int /*int*/ iPersonaName );
			int /*int*/ ISteamFriends_GetFriendSteamLevel( ulong steamIDFriend );
			IntPtr ISteamFriends_GetPlayerNickname( ulong steamIDPlayer );
			int /*int*/ ISteamFriends_GetFriendsGroupCount();
			FriendsGroupID_t /*(FriendsGroupID_t)*/ ISteamFriends_GetFriendsGroupIDByIndex( int /*int*/ iFG );
			IntPtr ISteamFriends_GetFriendsGroupName( short friendsGroupID );
			int /*int*/ ISteamFriends_GetFriendsGroupMembersCount( short friendsGroupID );
			void /*void*/ ISteamFriends_GetFriendsGroupMembersList( short friendsGroupID, IntPtr /*class CSteamID **/ pOutSteamIDMembers, int /*int*/ nMembersCount );
			bool /*bool*/ ISteamFriends_HasFriend( ulong steamIDFriend, int /*int*/ iFriendFlags );
			int /*int*/ ISteamFriends_GetClanCount();
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetClanByIndex( int /*int*/ iClan );
			IntPtr ISteamFriends_GetClanName( ulong steamIDClan );
			IntPtr ISteamFriends_GetClanTag( ulong steamIDClan );
			bool /*bool*/ ISteamFriends_GetClanActivityCounts( ulong steamIDClan, out int /*int **/ pnOnline, out int /*int **/ pnInGame, out int /*int **/ pnChatting );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_DownloadClanActivityCounts( IntPtr /*class CSteamID **/ psteamIDClans, int /*int*/ cClansToRequest );
			int /*int*/ ISteamFriends_GetFriendCountFromSource( ulong steamIDSource );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetFriendFromSourceByIndex( ulong steamIDSource, int /*int*/ iFriend );
			bool /*bool*/ ISteamFriends_IsUserInSource( ulong steamIDUser, ulong steamIDSource );
			void /*void*/ ISteamFriends_SetInGameVoiceSpeaking( ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bSpeaking );
			void /*void*/ ISteamFriends_ActivateGameOverlay( byte[] /*const char **/ pchDialog );
			void /*void*/ ISteamFriends_ActivateGameOverlayToUser( byte[] /*const char **/ pchDialog, ulong steamID );
			void /*void*/ ISteamFriends_ActivateGameOverlayToWebPage( byte[] /*const char **/ pchURL );
			void /*void*/ ISteamFriends_ActivateGameOverlayToStore( uint nAppID, OverlayToStoreFlag /*EOverlayToStoreFlag*/ eFlag );
			void /*void*/ ISteamFriends_SetPlayedWith( ulong steamIDUserPlayedWith );
			void /*void*/ ISteamFriends_ActivateGameOverlayInviteDialog( ulong steamIDLobby );
			int /*int*/ ISteamFriends_GetSmallFriendAvatar( ulong steamIDFriend );
			int /*int*/ ISteamFriends_GetMediumFriendAvatar( ulong steamIDFriend );
			int /*int*/ ISteamFriends_GetLargeFriendAvatar( ulong steamIDFriend );
			bool /*bool*/ ISteamFriends_RequestUserInformation( ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bRequireNameOnly );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_RequestClanOfficerList( ulong steamIDClan );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetClanOwner( ulong steamIDClan );
			int /*int*/ ISteamFriends_GetClanOfficerCount( ulong steamIDClan );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetClanOfficerByIndex( ulong steamIDClan, int /*int*/ iOfficer );
			uint /*uint32*/ ISteamFriends_GetUserRestrictions();
			bool /*bool*/ ISteamFriends_SetRichPresence( byte[] /*const char **/ pchKey, byte[] /*const char **/ pchValue );
			void /*void*/ ISteamFriends_ClearRichPresence();
			IntPtr ISteamFriends_GetFriendRichPresence( ulong steamIDFriend, byte[] /*const char **/ pchKey );
			int /*int*/ ISteamFriends_GetFriendRichPresenceKeyCount( ulong steamIDFriend );
			IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex( ulong steamIDFriend, int /*int*/ iKey );
			void /*void*/ ISteamFriends_RequestFriendRichPresence( ulong steamIDFriend );
			bool /*bool*/ ISteamFriends_InviteUserToGame( ulong steamIDFriend, byte[] /*const char **/ pchConnectString );
			int /*int*/ ISteamFriends_GetCoplayFriendCount();
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetCoplayFriend( int /*int*/ iCoplayFriend );
			int /*int*/ ISteamFriends_GetFriendCoplayTime( ulong steamIDFriend );
			AppId_t /*(AppId_t)*/ ISteamFriends_GetFriendCoplayGame( ulong steamIDFriend );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_JoinClanChatRoom( ulong steamIDClan );
			bool /*bool*/ ISteamFriends_LeaveClanChatRoom( ulong steamIDClan );
			int /*int*/ ISteamFriends_GetClanChatMemberCount( ulong steamIDClan );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetChatMemberByIndex( ulong steamIDClan, int /*int*/ iUser );
			bool /*bool*/ ISteamFriends_SendClanChatMessage( ulong steamIDClanChat, byte[] /*const char **/ pchText );
			int /*int*/ ISteamFriends_GetClanChatMessage( ulong steamIDClanChat, int /*int*/ iMessage, IntPtr /*void **/ prgchText, int /*int*/ cchTextMax, out ChatEntryType /*EChatEntryType **/ peChatEntryType, out ulong psteamidChatter );
			bool /*bool*/ ISteamFriends_IsClanChatAdmin( ulong steamIDClanChat, ulong steamIDUser );
			bool /*bool*/ ISteamFriends_IsClanChatWindowOpenInSteam( ulong steamIDClanChat );
			bool /*bool*/ ISteamFriends_OpenClanChatWindowInSteam( ulong steamIDClanChat );
			bool /*bool*/ ISteamFriends_CloseClanChatWindowInSteam( ulong steamIDClanChat );
			bool /*bool*/ ISteamFriends_SetListenForFriendsMessages( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bInterceptEnabled );
			bool /*bool*/ ISteamFriends_ReplyToFriendMessage( ulong steamIDFriend, byte[] /*const char **/ pchMsgToSend );
			int /*int*/ ISteamFriends_GetFriendMessage( ulong steamIDFriend, int /*int*/ iMessageID, IntPtr /*void **/ pvData, int /*int*/ cubData, out ChatEntryType /*EChatEntryType **/ peChatEntryType );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_GetFollowerCount( ulong steamID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_IsFollowing( ulong steamID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_EnumerateFollowingList( uint /*uint32*/ unStartIndex );
			bool /*bool*/ ISteamFriends_IsClanPublic( ulong steamIDClan );
			bool /*bool*/ ISteamFriends_IsClanOfficialGameGroup( ulong steamIDClan );
			bool /*bool*/ ISteamGameServer_InitGameServer( uint /*uint32*/ unIP, ushort /*uint16*/ usGamePort, ushort /*uint16*/ usQueryPort, uint /*uint32*/ unFlags, uint nGameAppId, byte[] /*const char **/ pchVersionString );
			void /*void*/ ISteamGameServer_SetProduct( byte[] /*const char **/ pszProduct );
			void /*void*/ ISteamGameServer_SetGameDescription( byte[] /*const char **/ pszGameDescription );
			void /*void*/ ISteamGameServer_SetModDir( byte[] /*const char **/ pszModDir );
			void /*void*/ ISteamGameServer_SetDedicatedServer( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bDedicated );
			void /*void*/ ISteamGameServer_LogOn( byte[] /*const char **/ pszToken );
			void /*void*/ ISteamGameServer_LogOnAnonymous();
			void /*void*/ ISteamGameServer_LogOff();
			bool /*bool*/ ISteamGameServer_BLoggedOn();
			bool /*bool*/ ISteamGameServer_BSecure();
			CSteamID /*(class CSteamID)*/ ISteamGameServer_GetSteamID();
			bool /*bool*/ ISteamGameServer_WasRestartRequested();
			void /*void*/ ISteamGameServer_SetMaxPlayerCount( int /*int*/ cPlayersMax );
			void /*void*/ ISteamGameServer_SetBotPlayerCount( int /*int*/ cBotplayers );
			void /*void*/ ISteamGameServer_SetServerName( byte[] /*const char **/ pszServerName );
			void /*void*/ ISteamGameServer_SetMapName( byte[] /*const char **/ pszMapName );
			void /*void*/ ISteamGameServer_SetPasswordProtected( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bPasswordProtected );
			void /*void*/ ISteamGameServer_SetSpectatorPort( ushort /*uint16*/ unSpectatorPort );
			void /*void*/ ISteamGameServer_SetSpectatorServerName( byte[] /*const char **/ pszSpectatorServerName );
			void /*void*/ ISteamGameServer_ClearAllKeyValues();
			void /*void*/ ISteamGameServer_SetKeyValue( byte[] /*const char **/ pKey, byte[] /*const char **/ pValue );
			void /*void*/ ISteamGameServer_SetGameTags( byte[] /*const char **/ pchGameTags );
			void /*void*/ ISteamGameServer_SetGameData( byte[] /*const char **/ pchGameData );
			void /*void*/ ISteamGameServer_SetRegion( byte[] /*const char **/ pszRegion );
			bool /*bool*/ ISteamGameServer_SendUserConnectAndAuthenticate( uint /*uint32*/ unIPClient, IntPtr /*const void **/ pvAuthBlob, uint /*uint32*/ cubAuthBlobSize, out ulong pSteamIDUser );
			CSteamID /*(class CSteamID)*/ ISteamGameServer_CreateUnauthenticatedUserConnection();
			void /*void*/ ISteamGameServer_SendUserDisconnect( ulong steamIDUser );
			bool /*bool*/ ISteamGameServer_BUpdateUserData( ulong steamIDUser, byte[] /*const char **/ pchPlayerName, uint /*uint32*/ uScore );
			HAuthTicket /*(HAuthTicket)*/ ISteamGameServer_GetAuthSessionTicket( IntPtr /*void **/ pTicket, int /*int*/ cbMaxTicket, out uint /*uint32 **/ pcbTicket );
			BeginAuthSessionResult /*EBeginAuthSessionResult*/ ISteamGameServer_BeginAuthSession( IntPtr /*const void **/ pAuthTicket, int /*int*/ cbAuthTicket, ulong steamID );
			void /*void*/ ISteamGameServer_EndAuthSession( ulong steamID );
			void /*void*/ ISteamGameServer_CancelAuthTicket( uint hAuthTicket );
			UserHasLicenseForAppResult /*EUserHasLicenseForAppResult*/ ISteamGameServer_UserHasLicenseForApp( ulong steamID, uint appID );
			bool /*bool*/ ISteamGameServer_RequestUserGroupStatus( ulong steamIDUser, ulong steamIDGroup );
			void /*void*/ ISteamGameServer_GetGameplayStats();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServer_GetServerReputation();
			uint /*uint32*/ ISteamGameServer_GetPublicIP();
			bool /*bool*/ ISteamGameServer_HandleIncomingPacket( IntPtr /*const void **/ pData, int /*int*/ cbData, uint /*uint32*/ srcIP, ushort /*uint16*/ srcPort );
			int /*int*/ ISteamGameServer_GetNextOutgoingPacket( IntPtr /*void **/ pOut, int /*int*/ cbMaxOut, out uint /*uint32 **/ pNetAdr, out ushort /*uint16 **/ pPort );
			void /*void*/ ISteamGameServer_EnableHeartbeats( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bActive );
			void /*void*/ ISteamGameServer_SetHeartbeatInterval( int /*int*/ iHeartbeatInterval );
			void /*void*/ ISteamGameServer_ForceHeartbeat();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServer_AssociateWithClan( ulong steamIDClan );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServer_ComputeNewPlayerCompatibility( ulong steamIDNewPlayer );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServerStats_RequestUserStats( ulong steamIDUser );
			bool /*bool*/ ISteamGameServerStats_GetUserStat( ulong steamIDUser, byte[] /*const char **/ pchName, out int /*int32 **/ pData );
			bool /*bool*/ ISteamGameServerStats_GetUserStat0( ulong steamIDUser, byte[] /*const char **/ pchName, out float /*float **/ pData );
			bool /*bool*/ ISteamGameServerStats_GetUserAchievement( ulong steamIDUser, byte[] /*const char **/ pchName, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamGameServerStats_SetUserStat( ulong steamIDUser, byte[] /*const char **/ pchName, int /*int32*/ nData );
			bool /*bool*/ ISteamGameServerStats_SetUserStat0( ulong steamIDUser, byte[] /*const char **/ pchName, float /*float*/ fData );
			bool /*bool*/ ISteamGameServerStats_UpdateUserAvgRateStat( ulong steamIDUser, byte[] /*const char **/ pchName, float /*float*/ flCountThisSession, double /*double*/ dSessionLength );
			bool /*bool*/ ISteamGameServerStats_SetUserAchievement( ulong steamIDUser, byte[] /*const char **/ pchName );
			bool /*bool*/ ISteamGameServerStats_ClearUserAchievement( ulong steamIDUser, byte[] /*const char **/ pchName );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServerStats_StoreUserStats( ulong steamIDUser );
			void /*void*/ ISteamHTMLSurface_DestructISteamHTMLSurface();
			bool /*bool*/ ISteamHTMLSurface_Init();
			bool /*bool*/ ISteamHTMLSurface_Shutdown();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamHTMLSurface_CreateBrowser( byte[] /*const char **/ pchUserAgent, byte[] /*const char **/ pchUserCSS );
			void /*void*/ ISteamHTMLSurface_RemoveBrowser( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_LoadURL( uint unBrowserHandle, byte[] /*const char **/ pchURL, byte[] /*const char **/ pchPostData );
			void /*void*/ ISteamHTMLSurface_SetSize( uint unBrowserHandle, uint /*uint32*/ unWidth, uint /*uint32*/ unHeight );
			void /*void*/ ISteamHTMLSurface_StopLoad( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_Reload( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_GoBack( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_GoForward( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_AddHeader( uint unBrowserHandle, byte[] /*const char **/ pchKey, byte[] /*const char **/ pchValue );
			void /*void*/ ISteamHTMLSurface_ExecuteJavascript( uint unBrowserHandle, byte[] /*const char **/ pchScript );
			void /*void*/ ISteamHTMLSurface_MouseUp( uint unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton );
			void /*void*/ ISteamHTMLSurface_MouseDown( uint unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton );
			void /*void*/ ISteamHTMLSurface_MouseDoubleClick( uint unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton );
			void /*void*/ ISteamHTMLSurface_MouseMove( uint unBrowserHandle, int /*int*/ x, int /*int*/ y );
			void /*void*/ ISteamHTMLSurface_MouseWheel( uint unBrowserHandle, int /*int32*/ nDelta );
			void /*void*/ ISteamHTMLSurface_KeyDown( uint unBrowserHandle, uint /*uint32*/ nNativeKeyCode, HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers );
			void /*void*/ ISteamHTMLSurface_KeyUp( uint unBrowserHandle, uint /*uint32*/ nNativeKeyCode, HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers );
			void /*void*/ ISteamHTMLSurface_KeyChar( uint unBrowserHandle, uint /*uint32*/ cUnicodeChar, HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers );
			void /*void*/ ISteamHTMLSurface_SetHorizontalScroll( uint unBrowserHandle, uint /*uint32*/ nAbsolutePixelScroll );
			void /*void*/ ISteamHTMLSurface_SetVerticalScroll( uint unBrowserHandle, uint /*uint32*/ nAbsolutePixelScroll );
			void /*void*/ ISteamHTMLSurface_SetKeyFocus( uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bHasKeyFocus );
			void /*void*/ ISteamHTMLSurface_ViewSource( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_CopyToClipboard( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_PasteFromClipboard( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_Find( uint unBrowserHandle, byte[] /*const char **/ pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReverse );
			void /*void*/ ISteamHTMLSurface_StopFind( uint unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_GetLinkAtPosition( uint unBrowserHandle, int /*int*/ x, int /*int*/ y );
			void /*void*/ ISteamHTMLSurface_SetCookie( byte[] /*const char **/ pchHostname, byte[] /*const char **/ pchKey, byte[] /*const char **/ pchValue, byte[] /*const char **/ pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bSecure, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bHTTPOnly );
			void /*void*/ ISteamHTMLSurface_SetPageScaleFactor( uint unBrowserHandle, float /*float*/ flZoom, int /*int*/ nPointX, int /*int*/ nPointY );
			void /*void*/ ISteamHTMLSurface_SetBackgroundMode( uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bBackgroundMode );
			void /*void*/ ISteamHTMLSurface_SetDPIScalingFactor( uint unBrowserHandle, float /*float*/ flDPIScaling );
			void /*void*/ ISteamHTMLSurface_AllowStartRequest( uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAllowed );
			void /*void*/ ISteamHTMLSurface_JSDialogResponse( uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bResult );
			HTTPRequestHandle /*(HTTPRequestHandle)*/ ISteamHTTP_CreateHTTPRequest( HTTPMethod /*EHTTPMethod*/ eHTTPRequestMethod, byte[] /*const char **/ pchAbsoluteURL );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestContextValue( uint hRequest, ulong /*uint64*/ ulContextValue );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestNetworkActivityTimeout( uint hRequest, uint /*uint32*/ unTimeoutSeconds );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestHeaderValue( uint hRequest, byte[] /*const char **/ pchHeaderName, byte[] /*const char **/ pchHeaderValue );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestGetOrPostParameter( uint hRequest, byte[] /*const char **/ pchParamName, byte[] /*const char **/ pchParamValue );
			bool /*bool*/ ISteamHTTP_SendHTTPRequest( uint hRequest, ref ulong pCallHandle );
			bool /*bool*/ ISteamHTTP_SendHTTPRequestAndStreamResponse( uint hRequest, ref ulong pCallHandle );
			bool /*bool*/ ISteamHTTP_DeferHTTPRequest( uint hRequest );
			bool /*bool*/ ISteamHTTP_PrioritizeHTTPRequest( uint hRequest );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseHeaderSize( uint hRequest, byte[] /*const char **/ pchHeaderName, out uint /*uint32 **/ unResponseHeaderSize );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseHeaderValue( uint hRequest, byte[] /*const char **/ pchHeaderName, out byte /*uint8 **/ pHeaderValueBuffer, uint /*uint32*/ unBufferSize );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseBodySize( uint hRequest, out uint /*uint32 **/ unBodySize );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseBodyData( uint hRequest, out byte /*uint8 **/ pBodyDataBuffer, uint /*uint32*/ unBufferSize );
			bool /*bool*/ ISteamHTTP_GetHTTPStreamingResponseBodyData( uint hRequest, uint /*uint32*/ cOffset, out byte /*uint8 **/ pBodyDataBuffer, uint /*uint32*/ unBufferSize );
			bool /*bool*/ ISteamHTTP_ReleaseHTTPRequest( uint hRequest );
			bool /*bool*/ ISteamHTTP_GetHTTPDownloadProgressPct( uint hRequest, out float /*float **/ pflPercentOut );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestRawPostBody( uint hRequest, byte[] /*const char **/ pchContentType, out byte /*uint8 **/ pubBody, uint /*uint32*/ unBodyLen );
			HTTPCookieContainerHandle /*(HTTPCookieContainerHandle)*/ ISteamHTTP_CreateCookieContainer( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAllowResponsesToModify );
			bool /*bool*/ ISteamHTTP_ReleaseCookieContainer( uint hCookieContainer );
			bool /*bool*/ ISteamHTTP_SetCookie( uint hCookieContainer, byte[] /*const char **/ pchHost, byte[] /*const char **/ pchUrl, byte[] /*const char **/ pchCookie );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestCookieContainer( uint hRequest, uint hCookieContainer );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestUserAgentInfo( uint hRequest, byte[] /*const char **/ pchUserAgentInfo );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate( uint hRequest, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bRequireVerifiedCertificate );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS( uint hRequest, uint /*uint32*/ unMilliseconds );
			bool /*bool*/ ISteamHTTP_GetHTTPRequestWasTimedOut( uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbWasTimedOut );
			Result /*EResult*/ ISteamInventory_GetResultStatus( int resultHandle );
			bool /*bool*/ ISteamInventory_GetResultItems( int resultHandle, IntPtr /*struct SteamItemDetails_t **/ pOutItemsArray, out uint /*uint32 **/ punOutItemsArraySize );
			bool /*bool*/ ISteamInventory_GetResultItemProperty( int resultHandle, uint /*uint32*/ unItemIndex, byte[] /*const char **/ pchPropertyName, System.Text.StringBuilder /*char **/ pchValueBuffer, out uint /*uint32 **/ punValueBufferSizeOut );
			uint /*uint32*/ ISteamInventory_GetResultTimestamp( int resultHandle );
			bool /*bool*/ ISteamInventory_CheckResultSteamID( int resultHandle, ulong steamIDExpected );
			void /*void*/ ISteamInventory_DestroyResult( int resultHandle );
			bool /*bool*/ ISteamInventory_GetAllItems( ref int pResultHandle );
			bool /*bool*/ ISteamInventory_GetItemsByID( ref int pResultHandle, ulong[] pInstanceIDs, uint /*uint32*/ unCountInstanceIDs );
			bool /*bool*/ ISteamInventory_SerializeResult( int resultHandle, IntPtr /*void **/ pOutBuffer, out uint /*uint32 **/ punOutBufferSize );
			bool /*bool*/ ISteamInventory_DeserializeResult( ref int pOutResultHandle, IntPtr /*const void **/ pBuffer, uint /*uint32*/ unBufferSize, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bRESERVED_MUST_BE_FALSE );
			bool /*bool*/ ISteamInventory_GenerateItems( ref int pResultHandle, int[] pArrayItemDefs, uint[] /*const uint32 **/ punArrayQuantity, uint /*uint32*/ unArrayLength );
			bool /*bool*/ ISteamInventory_GrantPromoItems( ref int pResultHandle );
			bool /*bool*/ ISteamInventory_AddPromoItem( ref int pResultHandle, int itemDef );
			bool /*bool*/ ISteamInventory_AddPromoItems( ref int pResultHandle, int[] pArrayItemDefs, uint /*uint32*/ unArrayLength );
			bool /*bool*/ ISteamInventory_ConsumeItem( ref int pResultHandle, ulong itemConsume, uint /*uint32*/ unQuantity );
			bool /*bool*/ ISteamInventory_ExchangeItems( ref int pResultHandle, int[] pArrayGenerate, uint[] /*const uint32 **/ punArrayGenerateQuantity, uint /*uint32*/ unArrayGenerateLength, ulong[] pArrayDestroy, uint[] /*const uint32 **/ punArrayDestroyQuantity, uint /*uint32*/ unArrayDestroyLength );
			bool /*bool*/ ISteamInventory_TransferItemQuantity( ref int pResultHandle, ulong itemIdSource, uint /*uint32*/ unQuantity, ulong itemIdDest );
			void /*void*/ ISteamInventory_SendItemDropHeartbeat();
			bool /*bool*/ ISteamInventory_TriggerItemDrop( ref int pResultHandle, int dropListDefinition );
			bool /*bool*/ ISteamInventory_TradeItems( ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] /*const uint32 **/ pArrayGiveQuantity, uint /*uint32*/ nArrayGiveLength, ulong[] pArrayGet, uint[] /*const uint32 **/ pArrayGetQuantity, uint /*uint32*/ nArrayGetLength );
			bool /*bool*/ ISteamInventory_LoadItemDefinitions();
			bool /*bool*/ ISteamInventory_GetItemDefinitionIDs( IntPtr /*SteamItemDef_t **/ pItemDefIDs, out uint /*uint32 **/ punItemDefIDsArraySize );
			bool /*bool*/ ISteamInventory_GetItemDefinitionProperty( int iDefinition, byte[] /*const char **/ pchPropertyName, System.Text.StringBuilder /*char **/ pchValueBuffer, out uint /*uint32 **/ punValueBufferSizeOut );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamInventory_RequestEligiblePromoItemDefinitionsIDs( ulong steamID );
			bool /*bool*/ ISteamInventory_GetEligiblePromoItemDefinitionIDs( ulong steamID, IntPtr /*SteamItemDef_t **/ pItemDefIDs, out uint /*uint32 **/ punItemDefIDsArraySize );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamInventory_StartPurchase( int[] pArrayItemDefs, uint[] /*const uint32 **/ punArrayQuantity, uint /*uint32*/ unArrayLength );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamInventory_RequestPrices();
			uint /*uint32*/ ISteamInventory_GetNumItemsWithPrices();
			bool /*bool*/ ISteamInventory_GetItemsWithPrices( IntPtr /*SteamItemDef_t **/ pArrayItemDefs, IntPtr /*uint64 **/ pPrices, uint /*uint32*/ unArrayLength );
			bool /*bool*/ ISteamInventory_GetItemPrice( int iDefinition, out ulong /*uint64 **/ pPrice );
			SteamInventoryUpdateHandle_t /*(SteamInventoryUpdateHandle_t)*/ ISteamInventory_StartUpdateProperties();
			bool /*bool*/ ISteamInventory_RemoveProperty( ulong handle, ulong nItemID, byte[] /*const char **/ pchPropertyName );
			bool /*bool*/ ISteamInventory_SetProperty( ulong handle, ulong nItemID, byte[] /*const char **/ pchPropertyName, byte[] /*const char **/ pchPropertyValue );
			bool /*bool*/ ISteamInventory_SetProperty0( ulong handle, ulong nItemID, byte[] /*const char **/ pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamInventory_SetProperty0( ulong handle, ulong nItemID, byte[] /*const char **/ pchPropertyName, long /*int64*/ nValue );
			bool /*bool*/ ISteamInventory_SetProperty0( ulong handle, ulong nItemID, byte[] /*const char **/ pchPropertyName, float /*float*/ flValue );
			bool /*bool*/ ISteamInventory_SubmitUpdateProperties( ulong handle, ref int pResultHandle );
			int /*int*/ ISteamMatchmaking_GetFavoriteGameCount();
			bool /*bool*/ ISteamMatchmaking_GetFavoriteGame( int /*int*/ iGame, ref uint pnAppID, out uint /*uint32 **/ pnIP, out ushort /*uint16 **/ pnConnPort, out ushort /*uint16 **/ pnQueryPort, out uint /*uint32 **/ punFlags, out uint /*uint32 **/ pRTime32LastPlayedOnServer );
			int /*int*/ ISteamMatchmaking_AddFavoriteGame( uint nAppID, uint /*uint32*/ nIP, ushort /*uint16*/ nConnPort, ushort /*uint16*/ nQueryPort, uint /*uint32*/ unFlags, uint /*uint32*/ rTime32LastPlayedOnServer );
			bool /*bool*/ ISteamMatchmaking_RemoveFavoriteGame( uint nAppID, uint /*uint32*/ nIP, ushort /*uint16*/ nConnPort, ushort /*uint16*/ nQueryPort, uint /*uint32*/ unFlags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamMatchmaking_RequestLobbyList();
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListStringFilter( byte[] /*const char **/ pchKeyToMatch, byte[] /*const char **/ pchValueToMatch, LobbyComparison /*ELobbyComparison*/ eComparisonType );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListNumericalFilter( byte[] /*const char **/ pchKeyToMatch, int /*int*/ nValueToMatch, LobbyComparison /*ELobbyComparison*/ eComparisonType );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListNearValueFilter( byte[] /*const char **/ pchKeyToMatch, int /*int*/ nValueToBeCloseTo );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable( int /*int*/ nSlotsAvailable );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListDistanceFilter( LobbyDistanceFilter /*ELobbyDistanceFilter*/ eLobbyDistanceFilter );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListResultCountFilter( int /*int*/ cMaxResults );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter( ulong steamIDLobby );
			CSteamID /*(class CSteamID)*/ ISteamMatchmaking_GetLobbyByIndex( int /*int*/ iLobby );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamMatchmaking_CreateLobby( LobbyType /*ELobbyType*/ eLobbyType, int /*int*/ cMaxMembers );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamMatchmaking_JoinLobby( ulong steamIDLobby );
			void /*void*/ ISteamMatchmaking_LeaveLobby( ulong steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_InviteUserToLobby( ulong steamIDLobby, ulong steamIDInvitee );
			int /*int*/ ISteamMatchmaking_GetNumLobbyMembers( ulong steamIDLobby );
			CSteamID /*(class CSteamID)*/ ISteamMatchmaking_GetLobbyMemberByIndex( ulong steamIDLobby, int /*int*/ iMember );
			IntPtr ISteamMatchmaking_GetLobbyData( ulong steamIDLobby, byte[] /*const char **/ pchKey );
			bool /*bool*/ ISteamMatchmaking_SetLobbyData( ulong steamIDLobby, byte[] /*const char **/ pchKey, byte[] /*const char **/ pchValue );
			int /*int*/ ISteamMatchmaking_GetLobbyDataCount( ulong steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_GetLobbyDataByIndex( ulong steamIDLobby, int /*int*/ iLobbyData, System.Text.StringBuilder /*char **/ pchKey, int /*int*/ cchKeyBufferSize, System.Text.StringBuilder /*char **/ pchValue, int /*int*/ cchValueBufferSize );
			bool /*bool*/ ISteamMatchmaking_DeleteLobbyData( ulong steamIDLobby, byte[] /*const char **/ pchKey );
			IntPtr ISteamMatchmaking_GetLobbyMemberData( ulong steamIDLobby, ulong steamIDUser, byte[] /*const char **/ pchKey );
			void /*void*/ ISteamMatchmaking_SetLobbyMemberData( ulong steamIDLobby, byte[] /*const char **/ pchKey, byte[] /*const char **/ pchValue );
			bool /*bool*/ ISteamMatchmaking_SendLobbyChatMsg( ulong steamIDLobby, IntPtr /*const void **/ pvMsgBody, int /*int*/ cubMsgBody );
			int /*int*/ ISteamMatchmaking_GetLobbyChatEntry( ulong steamIDLobby, int /*int*/ iChatID, out ulong pSteamIDUser, IntPtr /*void **/ pvData, int /*int*/ cubData, out ChatEntryType /*EChatEntryType **/ peChatEntryType );
			bool /*bool*/ ISteamMatchmaking_RequestLobbyData( ulong steamIDLobby );
			void /*void*/ ISteamMatchmaking_SetLobbyGameServer( ulong steamIDLobby, uint /*uint32*/ unGameServerIP, ushort /*uint16*/ unGameServerPort, ulong steamIDGameServer );
			bool /*bool*/ ISteamMatchmaking_GetLobbyGameServer( ulong steamIDLobby, out uint /*uint32 **/ punGameServerIP, out ushort /*uint16 **/ punGameServerPort, out ulong psteamIDGameServer );
			bool /*bool*/ ISteamMatchmaking_SetLobbyMemberLimit( ulong steamIDLobby, int /*int*/ cMaxMembers );
			int /*int*/ ISteamMatchmaking_GetLobbyMemberLimit( ulong steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_SetLobbyType( ulong steamIDLobby, LobbyType /*ELobbyType*/ eLobbyType );
			bool /*bool*/ ISteamMatchmaking_SetLobbyJoinable( ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bLobbyJoinable );
			CSteamID /*(class CSteamID)*/ ISteamMatchmaking_GetLobbyOwner( ulong steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_SetLobbyOwner( ulong steamIDLobby, ulong steamIDNewOwner );
			bool /*bool*/ ISteamMatchmaking_SetLinkedLobby( ulong steamIDLobby, ulong steamIDLobbyDependent );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestInternetServerList( uint iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestLANServerList( uint iApp, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestFriendsServerList( uint iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestFavoritesServerList( uint iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestHistoryServerList( uint iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestSpectatorServerList( uint iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse );
			void /*void*/ ISteamMatchmakingServers_ReleaseRequest( IntPtr hServerListRequest );
			IntPtr /*class gameserveritem_t **/ ISteamMatchmakingServers_GetServerDetails( IntPtr hRequest, int /*int*/ iServer );
			void /*void*/ ISteamMatchmakingServers_CancelQuery( IntPtr hRequest );
			void /*void*/ ISteamMatchmakingServers_RefreshQuery( IntPtr hRequest );
			bool /*bool*/ ISteamMatchmakingServers_IsRefreshing( IntPtr hRequest );
			int /*int*/ ISteamMatchmakingServers_GetServerCount( IntPtr hRequest );
			void /*void*/ ISteamMatchmakingServers_RefreshServer( IntPtr hRequest, int /*int*/ iServer );
			HServerQuery /*(HServerQuery)*/ ISteamMatchmakingServers_PingServer( uint /*uint32*/ unIP, ushort /*uint16*/ usPort, IntPtr /*class ISteamMatchmakingPingResponse **/ pRequestServersResponse );
			HServerQuery /*(HServerQuery)*/ ISteamMatchmakingServers_PlayerDetails( uint /*uint32*/ unIP, ushort /*uint16*/ usPort, IntPtr /*class ISteamMatchmakingPlayersResponse **/ pRequestServersResponse );
			HServerQuery /*(HServerQuery)*/ ISteamMatchmakingServers_ServerRules( uint /*uint32*/ unIP, ushort /*uint16*/ usPort, IntPtr /*class ISteamMatchmakingRulesResponse **/ pRequestServersResponse );
			void /*void*/ ISteamMatchmakingServers_CancelServerQuery( int hServerQuery );
			bool /*bool*/ ISteamMusic_BIsEnabled();
			bool /*bool*/ ISteamMusic_BIsPlaying();
			AudioPlayback_Status /*AudioPlayback_Status*/ ISteamMusic_GetPlaybackStatus();
			void /*void*/ ISteamMusic_Play();
			void /*void*/ ISteamMusic_Pause();
			void /*void*/ ISteamMusic_PlayPrevious();
			void /*void*/ ISteamMusic_PlayNext();
			void /*void*/ ISteamMusic_SetVolume( float /*float*/ flVolume );
			float /*float*/ ISteamMusic_GetVolume();
			bool /*bool*/ ISteamMusicRemote_RegisterSteamMusicRemote( byte[] /*const char **/ pchName );
			bool /*bool*/ ISteamMusicRemote_DeregisterSteamMusicRemote();
			bool /*bool*/ ISteamMusicRemote_BIsCurrentMusicRemote();
			bool /*bool*/ ISteamMusicRemote_BActivationSuccess( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_SetDisplayName( byte[] /*const char **/ pchDisplayName );
			bool /*bool*/ ISteamMusicRemote_SetPNGIcon_64x64( IntPtr /*void **/ pvBuffer, uint /*uint32*/ cbBufferLength );
			bool /*bool*/ ISteamMusicRemote_EnablePlayPrevious( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_EnablePlayNext( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_EnableShuffled( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_EnableLooped( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_EnableQueue( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_EnablePlaylists( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_UpdatePlaybackStatus( AudioPlayback_Status /*AudioPlayback_Status*/ nStatus );
			bool /*bool*/ ISteamMusicRemote_UpdateShuffled( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_UpdateLooped( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bValue );
			bool /*bool*/ ISteamMusicRemote_UpdateVolume( float /*float*/ flValue );
			bool /*bool*/ ISteamMusicRemote_CurrentEntryWillChange();
			bool /*bool*/ ISteamMusicRemote_CurrentEntryIsAvailable( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAvailable );
			bool /*bool*/ ISteamMusicRemote_UpdateCurrentEntryText( byte[] /*const char **/ pchText );
			bool /*bool*/ ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds( int /*int*/ nValue );
			bool /*bool*/ ISteamMusicRemote_UpdateCurrentEntryCoverArt( IntPtr /*void **/ pvBuffer, uint /*uint32*/ cbBufferLength );
			bool /*bool*/ ISteamMusicRemote_CurrentEntryDidChange();
			bool /*bool*/ ISteamMusicRemote_QueueWillChange();
			bool /*bool*/ ISteamMusicRemote_ResetQueueEntries();
			bool /*bool*/ ISteamMusicRemote_SetQueueEntry( int /*int*/ nID, int /*int*/ nPosition, byte[] /*const char **/ pchEntryText );
			bool /*bool*/ ISteamMusicRemote_SetCurrentQueueEntry( int /*int*/ nID );
			bool /*bool*/ ISteamMusicRemote_QueueDidChange();
			bool /*bool*/ ISteamMusicRemote_PlaylistWillChange();
			bool /*bool*/ ISteamMusicRemote_ResetPlaylistEntries();
			bool /*bool*/ ISteamMusicRemote_SetPlaylistEntry( int /*int*/ nID, int /*int*/ nPosition, byte[] /*const char **/ pchEntryText );
			bool /*bool*/ ISteamMusicRemote_SetCurrentPlaylistEntry( int /*int*/ nID );
			bool /*bool*/ ISteamMusicRemote_PlaylistDidChange();
			bool /*bool*/ ISteamNetworking_SendP2PPacket( ulong steamIDRemote, IntPtr /*const void **/ pubData, uint /*uint32*/ cubData, P2PSend /*EP2PSend*/ eP2PSendType, int /*int*/ nChannel );
			bool /*bool*/ ISteamNetworking_IsP2PPacketAvailable( out uint /*uint32 **/ pcubMsgSize, int /*int*/ nChannel );
			bool /*bool*/ ISteamNetworking_ReadP2PPacket( IntPtr /*void **/ pubDest, uint /*uint32*/ cubDest, out uint /*uint32 **/ pcubMsgSize, out ulong psteamIDRemote, int /*int*/ nChannel );
			bool /*bool*/ ISteamNetworking_AcceptP2PSessionWithUser( ulong steamIDRemote );
			bool /*bool*/ ISteamNetworking_CloseP2PSessionWithUser( ulong steamIDRemote );
			bool /*bool*/ ISteamNetworking_CloseP2PChannelWithUser( ulong steamIDRemote, int /*int*/ nChannel );
			bool /*bool*/ ISteamNetworking_GetP2PSessionState( ulong steamIDRemote, ref P2PSessionState_t /*struct P2PSessionState_t **/ pConnectionState );
			bool /*bool*/ ISteamNetworking_AllowP2PPacketRelay( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAllow );
			SNetListenSocket_t /*(SNetListenSocket_t)*/ ISteamNetworking_CreateListenSocket( int /*int*/ nVirtualP2PPort, uint /*uint32*/ nIP, ushort /*uint16*/ nPort, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAllowUseOfPacketRelay );
			SNetSocket_t /*(SNetSocket_t)*/ ISteamNetworking_CreateP2PConnectionSocket( ulong steamIDTarget, int /*int*/ nVirtualPort, int /*int*/ nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAllowUseOfPacketRelay );
			SNetSocket_t /*(SNetSocket_t)*/ ISteamNetworking_CreateConnectionSocket( uint /*uint32*/ nIP, ushort /*uint16*/ nPort, int /*int*/ nTimeoutSec );
			bool /*bool*/ ISteamNetworking_DestroySocket( uint hSocket, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bNotifyRemoteEnd );
			bool /*bool*/ ISteamNetworking_DestroyListenSocket( uint hSocket, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bNotifyRemoteEnd );
			bool /*bool*/ ISteamNetworking_SendDataOnSocket( uint hSocket, IntPtr /*void **/ pubData, uint /*uint32*/ cubData, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReliable );
			bool /*bool*/ ISteamNetworking_IsDataAvailableOnSocket( uint hSocket, out uint /*uint32 **/ pcubMsgSize );
			bool /*bool*/ ISteamNetworking_RetrieveDataFromSocket( uint hSocket, IntPtr /*void **/ pubDest, uint /*uint32*/ cubDest, out uint /*uint32 **/ pcubMsgSize );
			bool /*bool*/ ISteamNetworking_IsDataAvailable( uint hListenSocket, out uint /*uint32 **/ pcubMsgSize, ref uint phSocket );
			bool /*bool*/ ISteamNetworking_RetrieveData( uint hListenSocket, IntPtr /*void **/ pubDest, uint /*uint32*/ cubDest, out uint /*uint32 **/ pcubMsgSize, ref uint phSocket );
			bool /*bool*/ ISteamNetworking_GetSocketInfo( uint hSocket, out ulong pSteamIDRemote, IntPtr /*int **/ peSocketStatus, out uint /*uint32 **/ punIPRemote, out ushort /*uint16 **/ punPortRemote );
			bool /*bool*/ ISteamNetworking_GetListenSocketInfo( uint hListenSocket, out uint /*uint32 **/ pnIP, out ushort /*uint16 **/ pnPort );
			SNetSocketConnectionType /*ESNetSocketConnectionType*/ ISteamNetworking_GetSocketConnectionType( uint hSocket );
			int /*int*/ ISteamNetworking_GetMaxPacketSize( uint hSocket );
			bool /*bool*/ ISteamParentalSettings_BIsParentalLockEnabled();
			bool /*bool*/ ISteamParentalSettings_BIsParentalLockLocked();
			bool /*bool*/ ISteamParentalSettings_BIsAppBlocked( uint nAppID );
			bool /*bool*/ ISteamParentalSettings_BIsAppInBlockList( uint nAppID );
			bool /*bool*/ ISteamParentalSettings_BIsFeatureBlocked( ParentalFeature /*EParentalFeature*/ eFeature );
			bool /*bool*/ ISteamParentalSettings_BIsFeatureInBlockList( ParentalFeature /*EParentalFeature*/ eFeature );
			bool /*bool*/ ISteamRemoteStorage_FileWrite( byte[] /*const char **/ pchFile, IntPtr /*const void **/ pvData, int /*int32*/ cubData );
			int /*int32*/ ISteamRemoteStorage_FileRead( byte[] /*const char **/ pchFile, IntPtr /*void **/ pvData, int /*int32*/ cubDataToRead );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_FileWriteAsync( byte[] /*const char **/ pchFile, IntPtr /*const void **/ pvData, uint /*uint32*/ cubData );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_FileReadAsync( byte[] /*const char **/ pchFile, uint /*uint32*/ nOffset, uint /*uint32*/ cubToRead );
			bool /*bool*/ ISteamRemoteStorage_FileReadAsyncComplete( ulong hReadCall, IntPtr /*void **/ pvBuffer, uint /*uint32*/ cubToRead );
			bool /*bool*/ ISteamRemoteStorage_FileForget( byte[] /*const char **/ pchFile );
			bool /*bool*/ ISteamRemoteStorage_FileDelete( byte[] /*const char **/ pchFile );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_FileShare( byte[] /*const char **/ pchFile );
			bool /*bool*/ ISteamRemoteStorage_SetSyncPlatforms( byte[] /*const char **/ pchFile, RemoteStoragePlatform /*ERemoteStoragePlatform*/ eRemoteStoragePlatform );
			UGCFileWriteStreamHandle_t /*(UGCFileWriteStreamHandle_t)*/ ISteamRemoteStorage_FileWriteStreamOpen( byte[] /*const char **/ pchFile );
			bool /*bool*/ ISteamRemoteStorage_FileWriteStreamWriteChunk( ulong writeHandle, IntPtr /*const void **/ pvData, int /*int32*/ cubData );
			bool /*bool*/ ISteamRemoteStorage_FileWriteStreamClose( ulong writeHandle );
			bool /*bool*/ ISteamRemoteStorage_FileWriteStreamCancel( ulong writeHandle );
			bool /*bool*/ ISteamRemoteStorage_FileExists( byte[] /*const char **/ pchFile );
			bool /*bool*/ ISteamRemoteStorage_FilePersisted( byte[] /*const char **/ pchFile );
			int /*int32*/ ISteamRemoteStorage_GetFileSize( byte[] /*const char **/ pchFile );
			long /*int64*/ ISteamRemoteStorage_GetFileTimestamp( byte[] /*const char **/ pchFile );
			RemoteStoragePlatform /*ERemoteStoragePlatform*/ ISteamRemoteStorage_GetSyncPlatforms( byte[] /*const char **/ pchFile );
			int /*int32*/ ISteamRemoteStorage_GetFileCount();
			IntPtr ISteamRemoteStorage_GetFileNameAndSize( int /*int*/ iFile, out int /*int32 **/ pnFileSizeInBytes );
			bool /*bool*/ ISteamRemoteStorage_GetQuota( out ulong /*uint64 **/ pnTotalBytes, out ulong /*uint64 **/ puAvailableBytes );
			bool /*bool*/ ISteamRemoteStorage_IsCloudEnabledForAccount();
			bool /*bool*/ ISteamRemoteStorage_IsCloudEnabledForApp();
			void /*void*/ ISteamRemoteStorage_SetCloudEnabledForApp( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bEnabled );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UGCDownload( ulong hContent, uint /*uint32*/ unPriority );
			bool /*bool*/ ISteamRemoteStorage_GetUGCDownloadProgress( ulong hContent, out int /*int32 **/ pnBytesDownloaded, out int /*int32 **/ pnBytesExpected );
			bool /*bool*/ ISteamRemoteStorage_GetUGCDetails( ulong hContent, ref uint pnAppID, System.Text.StringBuilder /*char ***/ ppchName, out int /*int32 **/ pnFileSizeInBytes, out ulong pSteamIDOwner );
			int /*int32*/ ISteamRemoteStorage_UGCRead( ulong hContent, IntPtr /*void **/ pvData, int /*int32*/ cubDataToRead, uint /*uint32*/ cOffset, UGCReadAction /*EUGCReadAction*/ eAction );
			int /*int32*/ ISteamRemoteStorage_GetCachedUGCCount();
			UGCHandle_t /*(UGCHandle_t)*/ ISteamRemoteStorage_GetCachedUGCHandle( int /*int32*/ iCachedContent );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_PublishWorkshopFile( byte[] /*const char **/ pchFile, byte[] /*const char **/ pchPreviewFile, uint nConsumerAppId, byte[] /*const char **/ pchTitle, byte[] /*const char **/ pchDescription, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pTags, WorkshopFileType /*EWorkshopFileType*/ eWorkshopFileType );
			PublishedFileUpdateHandle_t /*(PublishedFileUpdateHandle_t)*/ ISteamRemoteStorage_CreatePublishedFileUpdateRequest( ulong unPublishedFileId );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileFile( ulong updateHandle, byte[] /*const char **/ pchFile );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFilePreviewFile( ulong updateHandle, byte[] /*const char **/ pchPreviewFile );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileTitle( ulong updateHandle, byte[] /*const char **/ pchTitle );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileDescription( ulong updateHandle, byte[] /*const char **/ pchDescription );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileVisibility( ulong updateHandle, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileTags( ulong updateHandle, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_CommitPublishedFileUpdate( ulong updateHandle );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_GetPublishedFileDetails( ulong unPublishedFileId, uint /*uint32*/ unMaxSecondsOld );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_DeletePublishedFile( ulong unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumerateUserPublishedFiles( uint /*uint32*/ unStartIndex );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_SubscribePublishedFile( ulong unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumerateUserSubscribedFiles( uint /*uint32*/ unStartIndex );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UnsubscribePublishedFile( ulong unPublishedFileId );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription( ulong updateHandle, byte[] /*const char **/ pchChangeDescription );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_GetPublishedItemVoteDetails( ulong unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UpdateUserPublishedItemVote( ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bVoteUp );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_GetUserPublishedItemVoteDetails( ulong unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles( ulong steamId, uint /*uint32*/ unStartIndex, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pRequiredTags, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pExcludedTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_PublishVideo( WorkshopVideoProvider /*EWorkshopVideoProvider*/ eVideoProvider, byte[] /*const char **/ pchVideoAccount, byte[] /*const char **/ pchVideoIdentifier, byte[] /*const char **/ pchPreviewFile, uint nConsumerAppId, byte[] /*const char **/ pchTitle, byte[] /*const char **/ pchDescription, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_SetUserPublishedFileAction( ulong unPublishedFileId, WorkshopFileAction /*EWorkshopFileAction*/ eAction );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumeratePublishedFilesByUserAction( WorkshopFileAction /*EWorkshopFileAction*/ eAction, uint /*uint32*/ unStartIndex );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumeratePublishedWorkshopFiles( WorkshopEnumerationType /*EWorkshopEnumerationType*/ eEnumerationType, uint /*uint32*/ unStartIndex, uint /*uint32*/ unCount, uint /*uint32*/ unDays, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pTags, ref SteamParamStringArray_t /*struct SteamParamStringArray_t **/ pUserTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UGCDownloadToLocation( ulong hContent, byte[] /*const char **/ pchLocation, uint /*uint32*/ unPriority );
			ScreenshotHandle /*(ScreenshotHandle)*/ ISteamScreenshots_WriteScreenshot( IntPtr /*void **/ pubRGB, uint /*uint32*/ cubRGB, int /*int*/ nWidth, int /*int*/ nHeight );
			ScreenshotHandle /*(ScreenshotHandle)*/ ISteamScreenshots_AddScreenshotToLibrary( byte[] /*const char **/ pchFilename, byte[] /*const char **/ pchThumbnailFilename, int /*int*/ nWidth, int /*int*/ nHeight );
			void /*void*/ ISteamScreenshots_TriggerScreenshot();
			void /*void*/ ISteamScreenshots_HookScreenshots( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bHook );
			bool /*bool*/ ISteamScreenshots_SetLocation( uint hScreenshot, byte[] /*const char **/ pchLocation );
			bool /*bool*/ ISteamScreenshots_TagUser( uint hScreenshot, ulong steamID );
			bool /*bool*/ ISteamScreenshots_TagPublishedFile( uint hScreenshot, ulong unPublishedFileID );
			bool /*bool*/ ISteamScreenshots_IsScreenshotsHooked();
			ScreenshotHandle /*(ScreenshotHandle)*/ ISteamScreenshots_AddVRScreenshotToLibrary( VRScreenshotType /*EVRScreenshotType*/ eType, byte[] /*const char **/ pchFilename, byte[] /*const char **/ pchVRFilename );
			UGCQueryHandle_t /*(UGCQueryHandle_t)*/ ISteamUGC_CreateQueryUserUGCRequest( uint unAccountID, UserUGCList /*EUserUGCList*/ eListType, UGCMatchingUGCType /*EUGCMatchingUGCType*/ eMatchingUGCType, UserUGCListSortOrder /*EUserUGCListSortOrder*/ eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint /*uint32*/ unPage );
			UGCQueryHandle_t /*(UGCQueryHandle_t)*/ ISteamUGC_CreateQueryAllUGCRequest( UGCQuery /*EUGCQuery*/ eQueryType, UGCMatchingUGCType /*EUGCMatchingUGCType*/ eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint /*uint32*/ unPage );
			UGCQueryHandle_t /*(UGCQueryHandle_t)*/ ISteamUGC_CreateQueryUGCDetailsRequest( IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ unNumPublishedFileIDs );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SendQueryUGCRequest( ulong handle );
			bool /*bool*/ ISteamUGC_GetQueryUGCResult( ulong handle, uint /*uint32*/ index, ref SteamUGCDetails_t /*struct SteamUGCDetails_t **/ pDetails );
			bool /*bool*/ ISteamUGC_GetQueryUGCPreviewURL( ulong handle, uint /*uint32*/ index, System.Text.StringBuilder /*char **/ pchURL, uint /*uint32*/ cchURLSize );
			bool /*bool*/ ISteamUGC_GetQueryUGCMetadata( ulong handle, uint /*uint32*/ index, System.Text.StringBuilder /*char **/ pchMetadata, uint /*uint32*/ cchMetadatasize );
			bool /*bool*/ ISteamUGC_GetQueryUGCChildren( ulong handle, uint /*uint32*/ index, IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ cMaxEntries );
			bool /*bool*/ ISteamUGC_GetQueryUGCStatistic( ulong handle, uint /*uint32*/ index, ItemStatistic /*EItemStatistic*/ eStatType, out ulong /*uint64 **/ pStatValue );
			uint /*uint32*/ ISteamUGC_GetQueryUGCNumAdditionalPreviews( ulong handle, uint /*uint32*/ index );
			bool /*bool*/ ISteamUGC_GetQueryUGCAdditionalPreview( ulong handle, uint /*uint32*/ index, uint /*uint32*/ previewIndex, System.Text.StringBuilder /*char **/ pchURLOrVideoID, uint /*uint32*/ cchURLSize, System.Text.StringBuilder /*char **/ pchOriginalFileName, uint /*uint32*/ cchOriginalFileNameSize, out ItemPreviewType /*EItemPreviewType **/ pPreviewType );
			uint /*uint32*/ ISteamUGC_GetQueryUGCNumKeyValueTags( ulong handle, uint /*uint32*/ index );
			bool /*bool*/ ISteamUGC_GetQueryUGCKeyValueTag( ulong handle, uint /*uint32*/ index, uint /*uint32*/ keyValueTagIndex, System.Text.StringBuilder /*char **/ pchKey, uint /*uint32*/ cchKeySize, System.Text.StringBuilder /*char **/ pchValue, uint /*uint32*/ cchValueSize );
			bool /*bool*/ ISteamUGC_ReleaseQueryUGCRequest( ulong handle );
			bool /*bool*/ ISteamUGC_AddRequiredTag( ulong handle, byte[] /*const char **/ pTagName );
			bool /*bool*/ ISteamUGC_AddExcludedTag( ulong handle, byte[] /*const char **/ pTagName );
			bool /*bool*/ ISteamUGC_SetReturnOnlyIDs( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnOnlyIDs );
			bool /*bool*/ ISteamUGC_SetReturnKeyValueTags( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnKeyValueTags );
			bool /*bool*/ ISteamUGC_SetReturnLongDescription( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnLongDescription );
			bool /*bool*/ ISteamUGC_SetReturnMetadata( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnMetadata );
			bool /*bool*/ ISteamUGC_SetReturnChildren( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnChildren );
			bool /*bool*/ ISteamUGC_SetReturnAdditionalPreviews( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnAdditionalPreviews );
			bool /*bool*/ ISteamUGC_SetReturnTotalOnly( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bReturnTotalOnly );
			bool /*bool*/ ISteamUGC_SetReturnPlaytimeStats( ulong handle, uint /*uint32*/ unDays );
			bool /*bool*/ ISteamUGC_SetLanguage( ulong handle, byte[] /*const char **/ pchLanguage );
			bool /*bool*/ ISteamUGC_SetAllowCachedResponse( ulong handle, uint /*uint32*/ unMaxAgeSeconds );
			bool /*bool*/ ISteamUGC_SetCloudFileNameFilter( ulong handle, byte[] /*const char **/ pMatchCloudFileName );
			bool /*bool*/ ISteamUGC_SetMatchAnyTag( ulong handle, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bMatchAnyTag );
			bool /*bool*/ ISteamUGC_SetSearchText( ulong handle, byte[] /*const char **/ pSearchText );
			bool /*bool*/ ISteamUGC_SetRankedByTrendDays( ulong handle, uint /*uint32*/ unDays );
			bool /*bool*/ ISteamUGC_AddRequiredKeyValueTag( ulong handle, byte[] /*const char **/ pKey, byte[] /*const char **/ pValue );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_RequestUGCDetails( ulong nPublishedFileID, uint /*uint32*/ unMaxAgeSeconds );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_CreateItem( uint nConsumerAppId, WorkshopFileType /*EWorkshopFileType*/ eFileType );
			UGCUpdateHandle_t /*(UGCUpdateHandle_t)*/ ISteamUGC_StartItemUpdate( uint nConsumerAppId, ulong nPublishedFileID );
			bool /*bool*/ ISteamUGC_SetItemTitle( ulong handle, byte[] /*const char **/ pchTitle );
			bool /*bool*/ ISteamUGC_SetItemDescription( ulong handle, byte[] /*const char **/ pchDescription );
			bool /*bool*/ ISteamUGC_SetItemUpdateLanguage( ulong handle, byte[] /*const char **/ pchLanguage );
			bool /*bool*/ ISteamUGC_SetItemMetadata( ulong handle, byte[] /*const char **/ pchMetaData );
			bool /*bool*/ ISteamUGC_SetItemVisibility( ulong handle, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility );
			bool /*bool*/ ISteamUGC_SetItemTags( ulong updateHandle, ref SteamParamStringArray_t /*const struct SteamParamStringArray_t **/ pTags );
			bool /*bool*/ ISteamUGC_SetItemContent( ulong handle, byte[] /*const char **/ pszContentFolder );
			bool /*bool*/ ISteamUGC_SetItemPreview( ulong handle, byte[] /*const char **/ pszPreviewFile );
			bool /*bool*/ ISteamUGC_RemoveItemKeyValueTags( ulong handle, byte[] /*const char **/ pchKey );
			bool /*bool*/ ISteamUGC_AddItemKeyValueTag( ulong handle, byte[] /*const char **/ pchKey, byte[] /*const char **/ pchValue );
			bool /*bool*/ ISteamUGC_AddItemPreviewFile( ulong handle, byte[] /*const char **/ pszPreviewFile, ItemPreviewType /*EItemPreviewType*/ type );
			bool /*bool*/ ISteamUGC_AddItemPreviewVideo( ulong handle, byte[] /*const char **/ pszVideoID );
			bool /*bool*/ ISteamUGC_UpdateItemPreviewFile( ulong handle, uint /*uint32*/ index, byte[] /*const char **/ pszPreviewFile );
			bool /*bool*/ ISteamUGC_UpdateItemPreviewVideo( ulong handle, uint /*uint32*/ index, byte[] /*const char **/ pszVideoID );
			bool /*bool*/ ISteamUGC_RemoveItemPreview( ulong handle, uint /*uint32*/ index );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SubmitItemUpdate( ulong handle, byte[] /*const char **/ pchChangeNote );
			ItemUpdateStatus /*EItemUpdateStatus*/ ISteamUGC_GetItemUpdateProgress( ulong handle, out ulong /*uint64 **/ punBytesProcessed, out ulong /*uint64 **/ punBytesTotal );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SetUserItemVote( ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bVoteUp );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_GetUserItemVote( ulong nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_AddItemToFavorites( uint nAppId, ulong nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_RemoveItemFromFavorites( uint nAppId, ulong nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SubscribeItem( ulong nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_UnsubscribeItem( ulong nPublishedFileID );
			uint /*uint32*/ ISteamUGC_GetNumSubscribedItems();
			uint /*uint32*/ ISteamUGC_GetSubscribedItems( IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ cMaxEntries );
			uint /*uint32*/ ISteamUGC_GetItemState( ulong nPublishedFileID );
			bool /*bool*/ ISteamUGC_GetItemInstallInfo( ulong nPublishedFileID, out ulong /*uint64 **/ punSizeOnDisk, System.Text.StringBuilder /*char **/ pchFolder, uint /*uint32*/ cchFolderSize, out uint /*uint32 **/ punTimeStamp );
			bool /*bool*/ ISteamUGC_GetItemDownloadInfo( ulong nPublishedFileID, out ulong /*uint64 **/ punBytesDownloaded, out ulong /*uint64 **/ punBytesTotal );
			bool /*bool*/ ISteamUGC_DownloadItem( ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bHighPriority );
			bool /*bool*/ ISteamUGC_BInitWorkshopForGameServer( uint unWorkshopDepotID, byte[] /*const char **/ pszFolder );
			void /*void*/ ISteamUGC_SuspendDownloads( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bSuspend );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_StartPlaytimeTracking( IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ unNumPublishedFileIDs );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_StopPlaytimeTracking( IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ unNumPublishedFileIDs );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_StopPlaytimeTrackingForAllItems();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_AddDependency( ulong nParentPublishedFileID, ulong nChildPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_RemoveDependency( ulong nParentPublishedFileID, ulong nChildPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_AddAppDependency( ulong nPublishedFileID, uint nAppID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_RemoveAppDependency( ulong nPublishedFileID, uint nAppID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_GetAppDependencies( ulong nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_DeleteItem( ulong nPublishedFileID );
			HSteamUser /*(HSteamUser)*/ ISteamUser_GetHSteamUser();
			bool /*bool*/ ISteamUser_BLoggedOn();
			CSteamID /*(class CSteamID)*/ ISteamUser_GetSteamID();
			int /*int*/ ISteamUser_InitiateGameConnection( IntPtr /*void **/ pAuthBlob, int /*int*/ cbMaxAuthBlob, ulong steamIDGameServer, uint /*uint32*/ unIPServer, ushort /*uint16*/ usPortServer, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bSecure );
			void /*void*/ ISteamUser_TerminateGameConnection( uint /*uint32*/ unIPServer, ushort /*uint16*/ usPortServer );
			void /*void*/ ISteamUser_TrackAppUsageEvent( ulong gameID, int /*int*/ eAppUsageEvent, byte[] /*const char **/ pchExtraInfo );
			bool /*bool*/ ISteamUser_GetUserDataFolder( System.Text.StringBuilder /*char **/ pchBuffer, int /*int*/ cubBuffer );
			void /*void*/ ISteamUser_StartVoiceRecording();
			void /*void*/ ISteamUser_StopVoiceRecording();
			VoiceResult /*EVoiceResult*/ ISteamUser_GetAvailableVoice( out uint /*uint32 **/ pcbCompressed, out uint /*uint32 **/ pcbUncompressed_Deprecated, uint /*uint32*/ nUncompressedVoiceDesiredSampleRate_Deprecated );
			VoiceResult /*EVoiceResult*/ ISteamUser_GetVoice( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bWantCompressed, IntPtr /*void **/ pDestBuffer, uint /*uint32*/ cbDestBufferSize, out uint /*uint32 **/ nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bWantUncompressed_Deprecated, IntPtr /*void **/ pUncompressedDestBuffer_Deprecated, uint /*uint32*/ cbUncompressedDestBufferSize_Deprecated, out uint /*uint32 **/ nUncompressBytesWritten_Deprecated, uint /*uint32*/ nUncompressedVoiceDesiredSampleRate_Deprecated );
			VoiceResult /*EVoiceResult*/ ISteamUser_DecompressVoice( IntPtr /*const void **/ pCompressed, uint /*uint32*/ cbCompressed, IntPtr /*void **/ pDestBuffer, uint /*uint32*/ cbDestBufferSize, out uint /*uint32 **/ nBytesWritten, uint /*uint32*/ nDesiredSampleRate );
			uint /*uint32*/ ISteamUser_GetVoiceOptimalSampleRate();
			HAuthTicket /*(HAuthTicket)*/ ISteamUser_GetAuthSessionTicket( IntPtr /*void **/ pTicket, int /*int*/ cbMaxTicket, out uint /*uint32 **/ pcbTicket );
			BeginAuthSessionResult /*EBeginAuthSessionResult*/ ISteamUser_BeginAuthSession( IntPtr /*const void **/ pAuthTicket, int /*int*/ cbAuthTicket, ulong steamID );
			void /*void*/ ISteamUser_EndAuthSession( ulong steamID );
			void /*void*/ ISteamUser_CancelAuthTicket( uint hAuthTicket );
			UserHasLicenseForAppResult /*EUserHasLicenseForAppResult*/ ISteamUser_UserHasLicenseForApp( ulong steamID, uint appID );
			bool /*bool*/ ISteamUser_BIsBehindNAT();
			void /*void*/ ISteamUser_AdvertiseGame( ulong steamIDGameServer, uint /*uint32*/ unIPServer, ushort /*uint16*/ usPortServer );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUser_RequestEncryptedAppTicket( IntPtr /*void **/ pDataToInclude, int /*int*/ cbDataToInclude );
			bool /*bool*/ ISteamUser_GetEncryptedAppTicket( IntPtr /*void **/ pTicket, int /*int*/ cbMaxTicket, out uint /*uint32 **/ pcbTicket );
			int /*int*/ ISteamUser_GetGameBadgeLevel( int /*int*/ nSeries, [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bFoil );
			int /*int*/ ISteamUser_GetPlayerSteamLevel();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUser_RequestStoreAuthURL( byte[] /*const char **/ pchRedirectURL );
			bool /*bool*/ ISteamUser_BIsPhoneVerified();
			bool /*bool*/ ISteamUser_BIsTwoFactorEnabled();
			bool /*bool*/ ISteamUser_BIsPhoneIdentifying();
			bool /*bool*/ ISteamUser_BIsPhoneRequiringVerification();
			bool /*bool*/ ISteamUserStats_RequestCurrentStats();
			bool /*bool*/ ISteamUserStats_GetStat( byte[] /*const char **/ pchName, out int /*int32 **/ pData );
			bool /*bool*/ ISteamUserStats_GetStat0( byte[] /*const char **/ pchName, out float /*float **/ pData );
			bool /*bool*/ ISteamUserStats_SetStat( byte[] /*const char **/ pchName, int /*int32*/ nData );
			bool /*bool*/ ISteamUserStats_SetStat0( byte[] /*const char **/ pchName, float /*float*/ fData );
			bool /*bool*/ ISteamUserStats_UpdateAvgRateStat( byte[] /*const char **/ pchName, float /*float*/ flCountThisSession, double /*double*/ dSessionLength );
			bool /*bool*/ ISteamUserStats_GetAchievement( byte[] /*const char **/ pchName, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamUserStats_SetAchievement( byte[] /*const char **/ pchName );
			bool /*bool*/ ISteamUserStats_ClearAchievement( byte[] /*const char **/ pchName );
			bool /*bool*/ ISteamUserStats_GetAchievementAndUnlockTime( byte[] /*const char **/ pchName, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved, out uint /*uint32 **/ punUnlockTime );
			bool /*bool*/ ISteamUserStats_StoreStats();
			int /*int*/ ISteamUserStats_GetAchievementIcon( byte[] /*const char **/ pchName );
			IntPtr ISteamUserStats_GetAchievementDisplayAttribute( byte[] /*const char **/ pchName, byte[] /*const char **/ pchKey );
			bool /*bool*/ ISteamUserStats_IndicateAchievementProgress( byte[] /*const char **/ pchName, uint /*uint32*/ nCurProgress, uint /*uint32*/ nMaxProgress );
			uint /*uint32*/ ISteamUserStats_GetNumAchievements();
			IntPtr ISteamUserStats_GetAchievementName( uint /*uint32*/ iAchievement );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_RequestUserStats( ulong steamIDUser );
			bool /*bool*/ ISteamUserStats_GetUserStat( ulong steamIDUser, byte[] /*const char **/ pchName, out int /*int32 **/ pData );
			bool /*bool*/ ISteamUserStats_GetUserStat0( ulong steamIDUser, byte[] /*const char **/ pchName, out float /*float **/ pData );
			bool /*bool*/ ISteamUserStats_GetUserAchievement( ulong steamIDUser, byte[] /*const char **/ pchName, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamUserStats_GetUserAchievementAndUnlockTime( ulong steamIDUser, byte[] /*const char **/ pchName, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved, out uint /*uint32 **/ punUnlockTime );
			bool /*bool*/ ISteamUserStats_ResetAllStats( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bAchievementsToo );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_FindOrCreateLeaderboard( byte[] /*const char **/ pchLeaderboardName, LeaderboardSortMethod /*ELeaderboardSortMethod*/ eLeaderboardSortMethod, LeaderboardDisplayType /*ELeaderboardDisplayType*/ eLeaderboardDisplayType );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_FindLeaderboard( byte[] /*const char **/ pchLeaderboardName );
			IntPtr ISteamUserStats_GetLeaderboardName( ulong hSteamLeaderboard );
			int /*int*/ ISteamUserStats_GetLeaderboardEntryCount( ulong hSteamLeaderboard );
			LeaderboardSortMethod /*ELeaderboardSortMethod*/ ISteamUserStats_GetLeaderboardSortMethod( ulong hSteamLeaderboard );
			LeaderboardDisplayType /*ELeaderboardDisplayType*/ ISteamUserStats_GetLeaderboardDisplayType( ulong hSteamLeaderboard );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_DownloadLeaderboardEntries( ulong hSteamLeaderboard, LeaderboardDataRequest /*ELeaderboardDataRequest*/ eLeaderboardDataRequest, int /*int*/ nRangeStart, int /*int*/ nRangeEnd );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_DownloadLeaderboardEntriesForUsers( ulong hSteamLeaderboard, IntPtr /*class CSteamID **/ prgUsers, int /*int*/ cUsers );
			bool /*bool*/ ISteamUserStats_GetDownloadedLeaderboardEntry( ulong hSteamLeaderboardEntries, int /*int*/ index, ref LeaderboardEntry_t /*struct LeaderboardEntry_t **/ pLeaderboardEntry, IntPtr /*int32 **/ pDetails, int /*int*/ cDetailsMax );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_UploadLeaderboardScore( ulong hSteamLeaderboard, LeaderboardUploadScoreMethod /*ELeaderboardUploadScoreMethod*/ eLeaderboardUploadScoreMethod, int /*int32*/ nScore, int[] /*const int32 **/ pScoreDetails, int /*int*/ cScoreDetailsCount );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_AttachLeaderboardUGC( ulong hSteamLeaderboard, ulong hUGC );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_GetNumberOfCurrentPlayers();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_RequestGlobalAchievementPercentages();
			int /*int*/ ISteamUserStats_GetMostAchievedAchievementInfo( System.Text.StringBuilder /*char **/ pchName, uint /*uint32*/ unNameBufLen, out float /*float **/ pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved );
			int /*int*/ ISteamUserStats_GetNextMostAchievedAchievementInfo( int /*int*/ iIteratorPrevious, System.Text.StringBuilder /*char **/ pchName, uint /*uint32*/ unNameBufLen, out float /*float **/ pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamUserStats_GetAchievementAchievedPercent( byte[] /*const char **/ pchName, out float /*float **/ pflPercent );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_RequestGlobalStats( int /*int*/ nHistoryDays );
			bool /*bool*/ ISteamUserStats_GetGlobalStat( byte[] /*const char **/ pchStatName, out long /*int64 **/ pData );
			bool /*bool*/ ISteamUserStats_GetGlobalStat0( byte[] /*const char **/ pchStatName, out double /*double **/ pData );
			int /*int32*/ ISteamUserStats_GetGlobalStatHistory( byte[] /*const char **/ pchStatName, out long /*int64 **/ pData, uint /*uint32*/ cubData );
			int /*int32*/ ISteamUserStats_GetGlobalStatHistory0( byte[] /*const char **/ pchStatName, out double /*double **/ pData, uint /*uint32*/ cubData );
			uint /*uint32*/ ISteamUtils_GetSecondsSinceAppActive();
			uint /*uint32*/ ISteamUtils_GetSecondsSinceComputerActive();
			Universe /*EUniverse*/ ISteamUtils_GetConnectedUniverse();
			uint /*uint32*/ ISteamUtils_GetServerRealTime();
			IntPtr ISteamUtils_GetIPCountry();
			bool /*bool*/ ISteamUtils_GetImageSize( int /*int*/ iImage, out uint /*uint32 **/ pnWidth, out uint /*uint32 **/ pnHeight );
			bool /*bool*/ ISteamUtils_GetImageRGBA( int /*int*/ iImage, IntPtr /*uint8 **/ pubDest, int /*int*/ nDestBufferSize );
			bool /*bool*/ ISteamUtils_GetCSERIPPort( out uint /*uint32 **/ unIP, out ushort /*uint16 **/ usPort );
			byte /*uint8*/ ISteamUtils_GetCurrentBatteryPower();
			uint /*uint32*/ ISteamUtils_GetAppID();
			void /*void*/ ISteamUtils_SetOverlayNotificationPosition( NotificationPosition /*ENotificationPosition*/ eNotificationPosition );
			bool /*bool*/ ISteamUtils_IsAPICallCompleted( ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbFailed );
			SteamAPICallFailure /*ESteamAPICallFailure*/ ISteamUtils_GetAPICallFailureReason( ulong hSteamAPICall );
			bool /*bool*/ ISteamUtils_GetAPICallResult( ulong hSteamAPICall, IntPtr /*void **/ pCallback, int /*int*/ cubCallback, int /*int*/ iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool /*bool **/ pbFailed );
			uint /*uint32*/ ISteamUtils_GetIPCCallCount();
			void /*void*/ ISteamUtils_SetWarningMessageHook( IntPtr /*SteamAPIWarningMessageHook_t*/ pFunction );
			bool /*bool*/ ISteamUtils_IsOverlayEnabled();
			bool /*bool*/ ISteamUtils_BOverlayNeedsPresent();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUtils_CheckFileSignature( byte[] /*const char **/ szFileName );
			bool /*bool*/ ISteamUtils_ShowGamepadTextInput( GamepadTextInputMode /*EGamepadTextInputMode*/ eInputMode, GamepadTextInputLineMode /*EGamepadTextInputLineMode*/ eLineInputMode, byte[] /*const char **/ pchDescription, uint /*uint32*/ unCharMax, byte[] /*const char **/ pchExistingText );
			uint /*uint32*/ ISteamUtils_GetEnteredGamepadTextLength();
			bool /*bool*/ ISteamUtils_GetEnteredGamepadTextInput( System.Text.StringBuilder /*char **/ pchText, uint /*uint32*/ cchText );
			IntPtr ISteamUtils_GetSteamUILanguage();
			bool /*bool*/ ISteamUtils_IsSteamRunningInVR();
			void /*void*/ ISteamUtils_SetOverlayNotificationInset( int /*int*/ nHorizontalInset, int /*int*/ nVerticalInset );
			bool /*bool*/ ISteamUtils_IsSteamInBigPictureMode();
			void /*void*/ ISteamUtils_StartVRDashboard();
			bool /*bool*/ ISteamUtils_IsVRHeadsetStreamingEnabled();
			void /*void*/ ISteamUtils_SetVRHeadsetStreamingEnabled( [MarshalAs(UnmanagedType.U1)] bool /*bool*/ bEnabled );
			void /*void*/ ISteamVideo_GetVideoURL( uint unVideoAppID );
			bool /*bool*/ ISteamVideo_IsBroadcasting( IntPtr /*int **/ pnNumViewers );
			void /*void*/ ISteamVideo_GetOPFSettings( uint unVideoAppID );
			bool /*bool*/ ISteamVideo_GetOPFStringForApp( uint unVideoAppID, System.Text.StringBuilder /*char **/ pchBuffer, out int /*int32 **/ pnBufferSize );
			bool /*bool*/ SteamApi_SteamAPI_Init();
			void /*void*/ SteamApi_SteamAPI_RunCallbacks();
			void /*void*/ SteamApi_SteamGameServer_RunCallbacks();
			void /*void*/ SteamApi_SteamAPI_RegisterCallback( IntPtr /*void **/ pCallback, int /*int*/ callback );
			void /*void*/ SteamApi_SteamAPI_UnregisterCallback( IntPtr /*void **/ pCallback );
			void /*void*/ SteamApi_SteamAPI_RegisterCallResult( IntPtr /*void **/ pCallback, ulong callback );
			void /*void*/ SteamApi_SteamAPI_UnregisterCallResult( IntPtr /*void **/ pCallback, ulong callback );
			bool /*bool*/ SteamApi_SteamInternal_GameServer_Init( uint /*uint32*/ unIP, ushort /*uint16*/ usPort, ushort /*uint16*/ usGamePort, ushort /*uint16*/ usQueryPort, int /*int*/ eServerMode, byte[] /*const char **/ pchVersionString );
			void /*void*/ SteamApi_SteamAPI_Shutdown();
			void /*void*/ SteamApi_SteamGameServer_Shutdown();
			HSteamUser /*(HSteamUser)*/ SteamApi_SteamAPI_GetHSteamUser();
			HSteamPipe /*(HSteamPipe)*/ SteamApi_SteamAPI_GetHSteamPipe();
			HSteamUser /*(HSteamUser)*/ SteamApi_SteamGameServer_GetHSteamUser();
			HSteamPipe /*(HSteamPipe)*/ SteamApi_SteamGameServer_GetHSteamPipe();
			IntPtr /*void **/ SteamApi_SteamInternal_CreateInterface( byte[] /*const char **/ version );
			bool /*bool*/ SteamApi_SteamAPI_RestartAppIfNecessary( uint /*uint32*/ unOwnAppID );
		}
	}
}
